/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Trademark: TrademarkObject
      TrademarkConnection: TrademarkConnectionObject
      PageInfo: PageInfoObject
      TrademarkEdge: TrademarkEdgeObject
      AggregateTrademark: AggregateTrademarkObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      TrademarkSubscriptionPayload: TrademarkSubscriptionPayloadObject
      TrademarkPreviousValues: TrademarkPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Trademark: TrademarkFieldDetails
      TrademarkConnection: TrademarkConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      TrademarkEdge: TrademarkEdgeFieldDetails
      AggregateTrademark: AggregateTrademarkFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      TrademarkSubscriptionPayload: TrademarkSubscriptionPayloadFieldDetails
      TrademarkPreviousValues: TrademarkPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      TrademarkWhereUniqueInput: TrademarkWhereUniqueInputInputObject
      TrademarkWhereInput: TrademarkWhereInputInputObject
      TrademarkCreateInput: TrademarkCreateInputInputObject
      TrademarkUpdateInput: TrademarkUpdateInputInputObject
      TrademarkUpdateManyMutationInput: TrademarkUpdateManyMutationInputInputObject
      TrademarkSubscriptionWhereInput: TrademarkSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    TrademarkOrderByInput: TrademarkOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'trademark', args?: QueryTrademarkArgs[] | false, alias?: string  } 
  | { name: 'trademarks', args?: QueryTrademarksArgs[] | false, alias?: string  } 
  | { name: 'trademarksConnection', args?: QueryTrademarksConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'trademark'
  | 'trademarks'
  | 'trademarksConnection'


type QueryTrademarkArgs =
  | 'where'
type QueryTrademarksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTrademarksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  trademark: {
    type: 'Trademark'
    args: Record<QueryTrademarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TrademarkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trademark | null> | prisma.Trademark | null
  }
  trademarks: {
    type: 'Trademark'
    args: Record<QueryTrademarksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TrademarkWhereInput | null, orderBy?: prisma.TrademarkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trademark[]> | prisma.Trademark[]
  }
  trademarksConnection: {
    type: 'TrademarkConnection'
    args: Record<QueryTrademarksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TrademarkWhereInput | null, orderBy?: prisma.TrademarkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrademarkConnection> | prisma.TrademarkConnection
  }
}
  

// Types for Trademark

type TrademarkObject =
  | TrademarkFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'className', args?: [] | false, alias?: string  } 

type TrademarkFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'description'
  | 'type'
  | 'className'



  

export interface TrademarkFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  className: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TrademarkConnection

type TrademarkConnectionObject =
  | TrademarkConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TrademarkConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TrademarkConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrademarkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TrademarkEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TrademarkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrademarkEdge[]> | prisma.TrademarkEdge[]
  }
  aggregate: {
    type: 'AggregateTrademark'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrademarkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTrademark> | prisma.AggregateTrademark
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TrademarkEdge

type TrademarkEdgeObject =
  | TrademarkEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TrademarkEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TrademarkEdgeFieldDetails {
  node: {
    type: 'Trademark'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrademarkEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trademark> | prisma.Trademark
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTrademark

type AggregateTrademarkObject =
  | AggregateTrademarkFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTrademarkFields =
  | 'count'



  

export interface AggregateTrademarkFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createTrademark', args?: MutationCreateTrademarkArgs[] | false, alias?: string  } 
  | { name: 'updateTrademark', args?: MutationUpdateTrademarkArgs[] | false, alias?: string  } 
  | { name: 'updateManyTrademarks', args?: MutationUpdateManyTrademarksArgs[] | false, alias?: string  } 
  | { name: 'upsertTrademark', args?: MutationUpsertTrademarkArgs[] | false, alias?: string  } 
  | { name: 'deleteTrademark', args?: MutationDeleteTrademarkArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTrademarks', args?: MutationDeleteManyTrademarksArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createTrademark'
  | 'updateTrademark'
  | 'updateManyTrademarks'
  | 'upsertTrademark'
  | 'deleteTrademark'
  | 'deleteManyTrademarks'


type MutationCreateTrademarkArgs =
  | 'data'
type MutationUpdateTrademarkArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTrademarksArgs =
  | 'data'
  | 'where'
type MutationUpsertTrademarkArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTrademarkArgs =
  | 'where'
type MutationDeleteManyTrademarksArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createTrademark: {
    type: 'Trademark'
    args: Record<MutationCreateTrademarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TrademarkCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trademark> | prisma.Trademark
  }
  updateTrademark: {
    type: 'Trademark'
    args: Record<MutationUpdateTrademarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TrademarkUpdateInput, where: TrademarkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trademark | null> | prisma.Trademark | null
  }
  updateManyTrademarks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTrademarksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TrademarkUpdateManyMutationInput, where?: TrademarkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTrademark: {
    type: 'Trademark'
    args: Record<MutationUpsertTrademarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TrademarkWhereUniqueInput, create: TrademarkCreateInput, update: TrademarkUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trademark> | prisma.Trademark
  }
  deleteTrademark: {
    type: 'Trademark'
    args: Record<MutationDeleteTrademarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TrademarkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trademark | null> | prisma.Trademark | null
  }
  deleteManyTrademarks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTrademarksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TrademarkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'trademark', args?: SubscriptionTrademarkArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'trademark'


type SubscriptionTrademarkArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  trademark: {
    type: 'TrademarkSubscriptionPayload'
    args: Record<SubscriptionTrademarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TrademarkSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrademarkSubscriptionPayload | null> | prisma.TrademarkSubscriptionPayload | null
  }
}
  

// Types for TrademarkSubscriptionPayload

type TrademarkSubscriptionPayloadObject =
  | TrademarkSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TrademarkSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TrademarkSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrademarkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Trademark'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TrademarkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trademark | null> | prisma.Trademark | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TrademarkPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TrademarkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrademarkPreviousValues | null> | prisma.TrademarkPreviousValues | null
  }
}
  

// Types for TrademarkPreviousValues

type TrademarkPreviousValuesObject =
  | TrademarkPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'className', args?: [] | false, alias?: string  } 

type TrademarkPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'description'
  | 'type'
  | 'className'



  

export interface TrademarkPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  className: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface TrademarkWhereUniqueInput {
  id?: string | null
}
export type TrademarkWhereUniqueInputInputObject =
  | Extract<keyof TrademarkWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TrademarkWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  type?: string | null
  type_not?: string | null
  type_in?: string[]
  type_not_in?: string[]
  type_lt?: string | null
  type_lte?: string | null
  type_gt?: string | null
  type_gte?: string | null
  type_contains?: string | null
  type_not_contains?: string | null
  type_starts_with?: string | null
  type_not_starts_with?: string | null
  type_ends_with?: string | null
  type_not_ends_with?: string | null
  className?: string | null
  className_not?: string | null
  className_in?: string[]
  className_not_in?: string[]
  className_lt?: string | null
  className_lte?: string | null
  className_gt?: string | null
  className_gte?: string | null
  className_contains?: string | null
  className_not_contains?: string | null
  className_starts_with?: string | null
  className_not_starts_with?: string | null
  className_ends_with?: string | null
  className_not_ends_with?: string | null
  AND?: TrademarkWhereInput[]
  OR?: TrademarkWhereInput[]
  NOT?: TrademarkWhereInput[]
}
export type TrademarkWhereInputInputObject =
  | Extract<keyof TrademarkWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'type_contains', alias?: string  } 
  | { name: 'type_not_contains', alias?: string  } 
  | { name: 'type_starts_with', alias?: string  } 
  | { name: 'type_not_starts_with', alias?: string  } 
  | { name: 'type_ends_with', alias?: string  } 
  | { name: 'type_not_ends_with', alias?: string  } 
  | { name: 'className', alias?: string  } 
  | { name: 'className_not', alias?: string  } 
  | { name: 'className_in', alias?: string  } 
  | { name: 'className_not_in', alias?: string  } 
  | { name: 'className_lt', alias?: string  } 
  | { name: 'className_lte', alias?: string  } 
  | { name: 'className_gt', alias?: string  } 
  | { name: 'className_gte', alias?: string  } 
  | { name: 'className_contains', alias?: string  } 
  | { name: 'className_not_contains', alias?: string  } 
  | { name: 'className_starts_with', alias?: string  } 
  | { name: 'className_not_starts_with', alias?: string  } 
  | { name: 'className_ends_with', alias?: string  } 
  | { name: 'className_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TrademarkCreateInput {
  id?: string | null
  name?: string
  description?: string | null
  type?: string
  className?: string
}
export type TrademarkCreateInputInputObject =
  | Extract<keyof TrademarkCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'className', alias?: string  } 
  
export interface TrademarkUpdateInput {
  name?: string | null
  description?: string | null
  type?: string | null
  className?: string | null
}
export type TrademarkUpdateInputInputObject =
  | Extract<keyof TrademarkUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'className', alias?: string  } 
  
export interface TrademarkUpdateManyMutationInput {
  name?: string | null
  description?: string | null
  type?: string | null
  className?: string | null
}
export type TrademarkUpdateManyMutationInputInputObject =
  | Extract<keyof TrademarkUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'className', alias?: string  } 
  
export interface TrademarkSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TrademarkWhereInput | null
  AND?: TrademarkSubscriptionWhereInput[]
  OR?: TrademarkSubscriptionWhereInput[]
  NOT?: TrademarkSubscriptionWhereInput[]
}
export type TrademarkSubscriptionWhereInputInputObject =
  | Extract<keyof TrademarkSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type TrademarkOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'className_ASC'
  | 'className_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  