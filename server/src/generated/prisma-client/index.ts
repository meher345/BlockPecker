// Code generated by Prisma (prisma@1.31.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  trademark: (where?: TrademarkWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  trademark: (where: TrademarkWhereUniqueInput) => TrademarkPromise;
  trademarks: (args?: {
    where?: TrademarkWhereInput;
    orderBy?: TrademarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Trademark>;
  trademarksConnection: (args?: {
    where?: TrademarkWhereInput;
    orderBy?: TrademarkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TrademarkConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createTrademark: (data: TrademarkCreateInput) => TrademarkPromise;
  updateTrademark: (args: {
    data: TrademarkUpdateInput;
    where: TrademarkWhereUniqueInput;
  }) => TrademarkPromise;
  updateManyTrademarks: (args: {
    data: TrademarkUpdateManyMutationInput;
    where?: TrademarkWhereInput;
  }) => BatchPayloadPromise;
  upsertTrademark: (args: {
    where: TrademarkWhereUniqueInput;
    create: TrademarkCreateInput;
    update: TrademarkUpdateInput;
  }) => TrademarkPromise;
  deleteTrademark: (where: TrademarkWhereUniqueInput) => TrademarkPromise;
  deleteManyTrademarks: (where?: TrademarkWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  trademark: (
    where?: TrademarkSubscriptionWhereInput
  ) => TrademarkSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TrademarkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "published_ASC"
  | "published_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "type_ASC"
  | "type_DESC"
  | "class_ASC"
  | "class_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TrademarkCreateInput {
  id?: ID_Input;
  published?: Boolean;
  name: String;
  description?: String;
  type: String;
  class: String;
}

export interface TrademarkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  class?: String;
  class_not?: String;
  class_in?: String[] | String;
  class_not_in?: String[] | String;
  class_lt?: String;
  class_lte?: String;
  class_gt?: String;
  class_gte?: String;
  class_contains?: String;
  class_not_contains?: String;
  class_starts_with?: String;
  class_not_starts_with?: String;
  class_ends_with?: String;
  class_not_ends_with?: String;
  AND?: TrademarkWhereInput[] | TrademarkWhereInput;
  OR?: TrademarkWhereInput[] | TrademarkWhereInput;
  NOT?: TrademarkWhereInput[] | TrademarkWhereInput;
}

export interface TrademarkUpdateInput {
  published?: Boolean;
  name?: String;
  description?: String;
  type?: String;
  class?: String;
}

export interface TrademarkUpdateManyMutationInput {
  published?: Boolean;
  name?: String;
  description?: String;
  type?: String;
  class?: String;
}

export interface TrademarkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TrademarkWhereInput;
  AND?: TrademarkSubscriptionWhereInput[] | TrademarkSubscriptionWhereInput;
  OR?: TrademarkSubscriptionWhereInput[] | TrademarkSubscriptionWhereInput;
  NOT?: TrademarkSubscriptionWhereInput[] | TrademarkSubscriptionWhereInput;
}

export type TrademarkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface TrademarkEdge {
  node: Trademark;
  cursor: String;
}

export interface TrademarkEdgePromise
  extends Promise<TrademarkEdge>,
    Fragmentable {
  node: <T = TrademarkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TrademarkEdgeSubscription
  extends Promise<AsyncIterator<TrademarkEdge>>,
    Fragmentable {
  node: <T = TrademarkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TrademarkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  name: String;
  description?: String;
  type: String;
  class: String;
}

export interface TrademarkPreviousValuesPromise
  extends Promise<TrademarkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  type: () => Promise<String>;
  class: () => Promise<String>;
}

export interface TrademarkPreviousValuesSubscription
  extends Promise<AsyncIterator<TrademarkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  class: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateTrademark {
  count: Int;
}

export interface AggregateTrademarkPromise
  extends Promise<AggregateTrademark>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTrademarkSubscription
  extends Promise<AsyncIterator<AggregateTrademark>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TrademarkSubscriptionPayload {
  mutation: MutationType;
  node: Trademark;
  updatedFields: String[];
  previousValues: TrademarkPreviousValues;
}

export interface TrademarkSubscriptionPayloadPromise
  extends Promise<TrademarkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TrademarkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TrademarkPreviousValuesPromise>() => T;
}

export interface TrademarkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TrademarkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TrademarkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TrademarkPreviousValuesSubscription>() => T;
}

export interface Trademark {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  name: String;
  description?: String;
  type: String;
  class: String;
}

export interface TrademarkPromise extends Promise<Trademark>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  type: () => Promise<String>;
  class: () => Promise<String>;
}

export interface TrademarkSubscription
  extends Promise<AsyncIterator<Trademark>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  class: () => Promise<AsyncIterator<String>>;
}

export interface TrademarkConnection {
  pageInfo: PageInfo;
  edges: TrademarkEdge[];
}

export interface TrademarkConnectionPromise
  extends Promise<TrademarkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TrademarkEdge>>() => T;
  aggregate: <T = AggregateTrademarkPromise>() => T;
}

export interface TrademarkConnectionSubscription
  extends Promise<AsyncIterator<TrademarkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TrademarkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTrademarkSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Trademark",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://us1.prisma.sh/meher-dff969/server/dev`
});
export const prisma = new Prisma();
